<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>Coding - Tag - Red David | Tech, Gaming, and Coding Blog</title>
        <link>https://reddavid.me/tags/coding/</link>
        <description>Coding - Tag - Red David | Tech, Gaming, and Coding Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 16 Mar 2021 01:28:15 &#43;0800</lastBuildDate><atom:link href="https://reddavid.me/tags/coding/" rel="self" type="application/rss+xml" /><item>
    <title>[Update: NOW AVAILABLE] ZIP Code PH for iOS</title>
    <link>https://reddavid.me/zipcodeph-ios/</link>
    <pubDate>Tue, 16 Mar 2021 01:28:15 &#43;0800</pubDate><dc:creator>David</dc:creator><guid>https://reddavid.me/zipcodeph-ios/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/feat/zipcodeph-ios.png" referrerpolicy="no-referrer">
            </div><h1 id="update-now-available">Update: Now Available</h1>
<p>You can get the app from App Store (iPhone and iPad) for only Php49 (US$0.99) - sorry for the paywall. I&rsquo;m still a struggling developer and just to let you know, developing for Apple costs more compared to Windows and Google Play Store.</p>
<p>Get the app below: <br/>
<a href="https://apps.apple.com/us/app/zip-code-ph/id1555921863?itsct=apps_box&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 83px;"></a></p>
<hr/>
<h1 id="lets-go">Let&rsquo;s Go</h1>
<p>For the last few weeks, I spent my free time building my app, ZIP Code PH, for iOS using Apple&rsquo;s native language SwiftUI.</p>
<p>Using a Mac is not that hard anymore since I&rsquo;ve test ran macOS Catalina on VirtualBox. I managed to run XCode and tried to tinker with the language, and built some UI mockups.</p>
<p>And luckily, the workplace has acquired a mac mini to cater Apple users for our apps (which is coming as soon as possible). I will also be the one developing the iOS apps, so check them out soon.</p>
<h1 id="development">Development</h1>
<h2 id="main-and-about-page">Main and About Page</h2>
<p>I am fairly new to SwiftUI so converting? the codes I used for Windows and Xamarin Android app - XAML and C# - will be useless. It took a few days to build the bare UI. I started with the Main Page and the Help page since they don&rsquo;t consume a lot of code-behind.</p>
<p>The Main Page took a lot of iterations but below is the final view (as of this writing):</p>
<figure class="image">

<figcaption><em>Main Page</em></figcaption>
</figure>
<br/>
<p>The Help/About Page contains the same details I used in the Android app except that I added attributions to the new images in the Main Page (thanks <a href="https://unsplash.com/" target="_blank">Unsplash!</a>)</p>
<figure class="image">


<figcaption><em>Help & About Page</em></figcaption>
</figure>
<br/>
<h2 id="search-page">Search Page</h2>
<p>Next up is the Search Page, I coded this before the menus since the code-behind logic is much simpler since we will use all the zip codes instead of filtering them to areas.</p>
<p>I didn&rsquo;t explorer SwiftUI that much but I found this code to build the Search bar iOS-style:</p>
<figure class="image">

<figcaption><em>iOS Search Bar</em></figcaption>
</figure>
<br/>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-swift" data-lang="swift"><span class="n">HStack</span> <span class="p">{</span>
    <span class="n">TextField</span><span class="p">(</span><span class="s">&#34;Search ZIP Code PH&#34;</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">)</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">horizontal</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
        <span class="p">.</span><span class="n">background</span><span class="p">(</span><span class="n">Color</span><span class="p">(.</span><span class="n">systemGray6</span><span class="p">))</span>
        <span class="p">.</span><span class="n">cornerRadius</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
        <span class="p">.</span><span class="n">overlay</span><span class="p">(</span>
            <span class="n">HStack</span> <span class="p">{</span>
                <span class="n">Image</span><span class="p">(</span><span class="n">systemName</span><span class="p">:</span> <span class="s">&#34;magnifyingglass&#34;</span><span class="p">)</span>
                    <span class="p">.</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">gray</span><span class="p">)</span>
                    <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxWidth</span><span class="p">:</span> <span class="p">.</span><span class="n">infinity</span><span class="p">,</span> <span class="n">alignment</span><span class="p">:</span> <span class="p">.</span><span class="n">leading</span><span class="p">)</span>
                    <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">leading</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">isEditing</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="kc">self</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="bp">isEmpty</span> <span class="p">{</span>
                    <span class="n">Button</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="p">{</span>
                        <span class="kc">self</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
                    <span class="p">})</span> <span class="p">{</span>
                        <span class="n">Image</span><span class="p">(</span><span class="n">systemName</span><span class="p">:</span> <span class="s">&#34;multiply.circle.fill&#34;</span><span class="p">)</span>
                            <span class="p">.</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">gray</span><span class="p">)</span>
                            <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">trailing</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">)</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">horizontal</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="p">.</span><span class="n">onTapGesture</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">isEditing</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="p">}</span>

    <span class="k">if</span> <span class="n">isEditing</span> <span class="p">{</span>
        <span class="n">Button</span><span class="p">(</span><span class="n">action</span><span class="p">:</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="err">$</span><span class="n">text</span><span class="p">)</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">isEditing</span> <span class="p">=</span> <span class="kc">false</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
            <span class="c1">// Dismiss the keyboard</span>
            <span class="n">UIApplication</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">sendAction</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="n">UIResponder</span><span class="p">.</span><span class="n">resignFirstResponder</span><span class="p">),</span> <span class="n">to</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="k">for</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="p">})</span> <span class="p">{</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&#34;Cancel&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">leading</span><span class="p">,</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">(.</span><span class="n">trailing</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="p">.</span><span class="n">transition</span><span class="p">(.</span><span class="n">move</span><span class="p">(</span><span class="n">edge</span><span class="p">:</span> <span class="p">.</span><span class="n">trailing</span><span class="p">))</span>
        <span class="p">.</span><span class="n">animation</span><span class="p">(.</span><span class="n">easeInOut</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><br/>
<video muted width="280" controls style="display:block;margin-left:auto;margin-right:auto;">
  <source src="/videos/03-21/zipcodeph-ios/searchpage.mp4" type="video/mp4">
</video>
<br/>
<p>I spent a few times making the search (filtering) logic work the way I wanted that I almost gave up with SwiftUI programming 😅</p>
<h2 id="menu-and-area-list-page">Menu and Area List Page</h2>
<p>After understanding the filtering code while developing the Search Page, it is time to code the Menu and Area pages. The UI looks a lot like the Android counterpart but the built-in Title style for iOS makes the UI better by collapsing the title to inline when scrolled. This is how it looks like on version 1.0.4</p>
<figure class="image">

<figcaption><em>City and Area Pages</em></figcaption>
</figure>
<br/>
<h2 id="favorites">Favorites</h2>
<p>Now the challenge begins, how to implement favorites - saving and loading data - while making the UI flexible when an item is added to favorites.</p>
<p>After more than a week of mind-bending development, I made it to work with the help of stackoverflow 😅. (Every developer use it, right? Right?)</p>
<video muted width="280" controls style="display:block;margin-left:auto;margin-right:auto;">
  <source src="/videos/03-21/zipcodeph-ios/favorite.mp4" type="video/mp4">
</video>
<br/>
<h1 id="showcase">Showcase</h1>
<p>Below are the app showcase which you can see on the App Store as soon as the app is available</p>
<style>

div#gallery-zipcodephios {
   display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

div#gallery-zipcodephios a {
  width: 20%;
  margin: 5px;
}

</style>
<div id="gallery-zipcodephios">
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/color-mode.png" title="Light and Dark Mode" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/color-mode.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/favorites.png" title="Favorites Page" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/favorites.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/search.png" title="Search Page" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/search.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/trivia.png" title="Trivias" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/trivia.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/ncr-and-luzon.png" title="NCR and Luzon" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/ncr-and-luzon.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/visayas.png" title="Visayas" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/visayas.png">
        
    </a>
<a class="lightgallery" href="/images/03-21/zipcodeph-ios/gallery/mindanao.png" title="Mindanao" data-thumbnail="/images/03-21/zipcodeph-ios/gallery/mindanao.png">
        
    </a>
</div>
<h1 id="now-available-you-can-get-it-soon">(Now Available) You Can Get it Soon</h1>
<p><a href="https://apple.co/3lrnrBO" target="_blank">Get the app</a></p>
<p>The app can be tested and I will share the TestFlight link soon. I am still fixing some minor issues and will announce the availability on a new blog post.</p>
<p>For the meantime, the app is still available for Android and Windows 10.</p>
<p>You can check the blog posts here for the download links:
<br/>
<a href="/zipcodeph-android-dark-mode/">ZIP Code PH for Android gets Dark Mode
</a>
<br/>
<a href="/zipcodeph-new-ui/">ZIP Code PH Gets Refreshed UI</a></p>
]]></description>
</item><item>
    <title>New Keeb in Town</title>
    <link>https://reddavid.me/new-keeb/</link>
    <pubDate>Mon, 17 Aug 2020 19:56:25 &#43;0800</pubDate><dc:creator>David</dc:creator><guid>https://reddavid.me/new-keeb/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/feat/tecware.jpg" referrerpolicy="no-referrer">
            </div><p>This is a simple review and unboxing post for my newly bought keyboard today. It is the Tecware Phantom Elite TKL with Gateron brown switches. I am using it to write this post.</p>
<p>I have used a number of mechanical keyboards in the past, the first one was an Aula one with Outemu blues. Then a TKL with blue Gateron switches, I forgot the brand, but it&rsquo;s also Chinese. And my slightly premium keyboards, the Logitech G403 and the G810.</p>
<p>The G810 was a stay-at-home keyboard for my laptop and the G403 lives in the office. And guess what, both are defective with unresponsive and ghosting keys, respectively. I thought of delaying buying a new one for &ldquo;budget&rdquo; reasons but coding with keyboard issues is a definitely a pain in the ass with constant deleting doubling keys and characters. I am looking for several &ldquo;budget&rdquo; keyboards out there, including the TNC Icarus one with Cherry MXs but the delivery time was so bad that I had to settle down with this one.</p>
<p>Coming from Logitech, I almost passed on this one for its &ldquo;gamer&rdquo; font which I don&rsquo;t think is <em>clean</em> for my desk, but my wallet said &ldquo;it&rsquo;s okay, you can live with that&rdquo;.</p>
<p>I bought one with brown switches since the old ones I had had Romer-Gs with a &ldquo;mushy-tactile&rdquo; feel on keypress so I don&rsquo;t have to worry much about them on the long run.</p>
</br>
<h1>My thoughts</h1>
<p>The box looks premium with minimal print of the logo and keyboard model on the center.</p>
<figure class="image">

  <figcaption><em>Keyboard box</em></figcaption>
</figure>
</br>
<p>Inside the box was the keyboard wrapped in plastic? with a keyboard cover made of plastic again, on top. It also came with 4 extra switches and a switch puller.</p>
<figure class="image">

  <figcaption><em>Inside the box</em></figcaption>
</figure>
</br>
<figure class="image">

  <figcaption><em>Extra switches with puller</em></figcaption>
</figure>
</br>
<p>The keyboard has a TKL layout, with software-customizable RGB setting, and replaceable switches (modular). It costs php2,500, slightly costier than their Tecware Phantoms - I&rsquo;m yet to investigate why.</p>
<figure class="image">

  <figcaption><em>Tecware RGB software</em></figcaption>
</figure>
</br>
<p>About the &ldquo;gamer&rdquo; font I hated, this game with a cleaner font. Surprised am I! Though the printing of the keycaps has the &ldquo;stencil&rdquo; cut beneath that the LED does not shine that much. Guess I&rsquo;m okay after all. Some function keys, has this cheap white printing that I fear them to get scraped off some time soon.</p>
<figure class="image">

  <figcaption><em>The keyboard itself</em></figcaption>
</figure>
</br>
<p>The RGB lighting is good with bunch of built-in modes which can be visualized and edited using their software. Here&rsquo;s what it looks like in an unlit office desk.</p>
<figure class="image">

  <figcaption><em>RGB lighting in unlit room</em></figcaption>
</figure>
</br>
<p>I went ahead for a typing test and got a 76wpm results with no mistyped words. But let&rsquo;s see how long this budget badboy keyboard lasts.</p>
<p>That&rsquo;s all, just a short review and unboxing post for the internet people to see. If you want me to have a typing test and sound test for it, let me know.</p>
<p>Also, my apps are still available in the <a href="ms-windows-store:publisher?name=Red David" target="_blank">Microsoft Store</a> and some in the <a href="https://play.google.com/store/apps/dev?id=5465762079490576029" target="_blank">Google Play Store</a>, where I mostly get my funds for buying these stuff. You can always check them out, they&rsquo;re free to download and use, you don&rsquo;t have to buy or pay the the listed price - unless you want to.</p>
]]></description>
</item></channel>
</rss>
